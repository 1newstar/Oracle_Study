	--一.存储函数学习
	--1.无参
	--a.返回当前日期
	CREATE OR REPLACE FUNCTION GET_DATE RETURN DATE IS
	--声明变量
BEGIN
	--执行逻辑
	RETURN SYSDATE;
END;
/
	--2.有参
	--a.两数相加
	CREATE OR REPLACE FUNCTION NUM_ADD(NUM1 NUMBER, NUM2 NUMBER) RETURN NUMBER IS
BEGIN
	RETURN NUM1 + NUM2;
END;
/
	--b.定义函数:获取指定部门的工资总和,要求:部门号定义为参数,工资总额为返回值
	CREATE OR REPLACE FUNCTION GET_SUM(DEP_ID NUMBER) RETURN NUMBER IS
	SUM_SAL NUMBER;
BEGIN
	SELECT SUM(SALARY) INTO SUM_SAL FROM EMPLOYEES WHERE DEPARTMENT_ID = DEP_ID; RETURN SUM_SAL;
END;
/
	--注意:out的使用:实现多个返回值
	CREATE OR REPLACE FUNCTION GET_SUM2(DEP_ID NUMBER, TOTAL_EMP OUT NUMBER) RETURN NUMBER IS
	SUM_SAL NUMBER;
BEGIN
	SELECT COUNT(EMPLOYEE_ID), SUM(SALARY) INTO TOTAL_EMP, SUM_SAL FROM EMPLOYEES WHERE DEPARTMENT_ID = DEP_ID; RETURN SUM_SAL;
END;
/
	--二.存储过程学习
	--a.定义一个存储过程:获取给定部门的工资总数(通过out参数),要求:部门号和工资总额为参数
	CREATE OR REPLACE PROCEDURE GET_SALSUM(DEP_ID NUMBER, SAL_SUM OUT NUMBER) IS
	CURSOR EMPC IS
	SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = DEP_ID;
BEGIN
	SAL_SUM := 0; FOR EMP IN EMPC LOOP SAL_SUM := SAL_SUM + EMP.SALARY;
END LOOP; DBMS_OUTPUT.PUT_LINE('pro薪资:' || SAL_SUM);
END;
/ --存储过程不能带/

	--b.对给定部门(作为输入参数)的员工进行加薪操作,若其到公司的时间在 (?,2003),为其加薪5%,  [2003,2006),为其加薪3%, 
	--                                                                                        [2006,?)为其加薪1%
	--得到以下返回结果,为此次加薪公司每个月需要额外付出多少成本(定义一个out型的输出参数),可以结合游标(可选)
	--纯数字的字符串可以隐式转化
CREATE OR REPLACE PROCEDURE ADD_SAL(DEP_ID NUMBER, EXTRA_COST OUT NUMBER) IS
	--初始化比率为0
	V_RATIO NUMBER := 0;
	--定义游标
	CURSOR EMPC IS
		SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = DEP_ID;
BEGIN
	--将额外的付出成本置为0
	EXTRA_COST := 0;
	--执行升级
	FOR EMP IN EMPC LOOP
		IF TO_CHAR(EMP.HIRE_DATE, 'yyyy') < '2003' THEN
			V_RATIO := 0.05;
		ELSIF TO_CHAR(EMP.HIRE_DATE, 'yyyy') >= '2003' AND
			  TO_CHAR(EMP.HIRE_DATE, 'yyyy') < '2006' THEN
			V_RATIO := 0.03;
		ELSIF TO_CHAR(EMP.HIRE_DATE, 'yyyy') >= '2006' THEN
			V_RATIO := 0.01;
		END IF;
		EXTRA_COST := EXTRA_COST + EMP.SALARY * V_RATIO;
		DBMS_OUTPUT.PUT_LINE(RPAD('编号:' || EMP.EMPLOYEE_ID, 20, ' ') ||
							 RPAD('姓名:' || EMP.LAST_NAME, 20, ' ') ||
							 RPAD('部门:' || EMP.DEPARTMENT_ID, 20, ' ') ||
							 RPAD('原薪水:' || EMP.SALARY, 20, ' ') ||
							 RPAD('新薪水:' || EMP.SALARY * (1 + V_RATIO),
								  20,
								  ' ') ||
							 RPAD('涨幅:' || TO_CHAR(V_RATIO, 'FM99990.099'),
								  20,
								  ' ') ||
							 RPAD('入职年份:' ||
								  TO_CHAR(EMP.HIRE_DATE, 'yyyy'),
								  20,
								  ' '));
	END LOOP;
END;

SELECT TO_NUMBER(TO_CHAR(HIRE_DATE, 'yyyy')), TO_CHAR('2017-12-12', 'yyyy') < '2003' FROM EMPLOYEES; SELECT TO_NUMBER(TO_CHAR(HIRE_DATE, 'yyyy')), COUNT(*) FROM EMPLOYEES WHERE DEPARTMENT_ID = 100 GROUP BY TO_NUMBER(TO_CHAR(HIRE_DATE, 'yyyy')) ORDER BY TO_NUMBER(TO_CHAR(HIRE_DATE, 'yyyy')); SELECT TO_NUMBER(TO_CHAR(HIRE_DATE, 'yyyy')) > '2003' FROM EMPLOYEES;

	--***执行
	DECLARE EXTRA_COST NUMBER := 0;
BEGIN
	ADD_SAL(&dep_id, EXTRA_COST); DBMS_OUTPUT.PUT_LINE('额外的成本:' || EXTRA_COST);
END;
/

	DECLARE SAL NUMBER;
BEGIN
	GET_SALSUM(80, SAL); DBMS_OUTPUT.PUT_LINE('lala-->' || SAL);
END;
/
	DECLARE TE NUMBER;
BEGIN
	DBMS_OUTPUT.PUT_LINE('总工资:' || GET_SUM2(80, TE)); DBMS_OUTPUT.PUT_LINE('员工人数:' || TE);
END;
/
	SELECT GET_SUM(80) FROM DUAL; SELECT NUM_ADD(1, 2) FROM DUAL; SELECT GET_DATE FROM DUAL;

	SELECT TO_CHAR(0.5, 'FM99999990.099') FROM DUAL;
